# Module Building Guide

The goal of this section is to document a clear, repeatable way for developers to create modules to supplement and enhance the operation of the web2project system. There are numerous code samples included because showing is often more important than explaining. As certain non-core functionality becomes standardized, some of it will be added to the core system itself. This will not only simplify Add On development but also make sure that all modules adhere to the same standards and logic flows.

Failure to follow the recommendations in this section can lead to non-functioning modules, brittle code prone to breaking, security vulnerabilities, and even bad hair days. None of these are pleasant.

## Expectations

*  All input MUST be filtered before it is used in '''any''' capacity to help prevent security vulnerabilities such as [SQL injection](http://en.wikipedia.org/wiki/SQL_injection) and [Cross Site Scripting](http://en.wikipedia.org/wiki/Cross-site_scripting) attacks.
*  A module MUST NOT have raw SQL statements.
*  A module MUST NOT have references to the w2p_Database_Query class/object outside of the module's core class and (optional) subclasses.
*  A module SHOULD use core web2project function/method/API calls instead of copy/pasting logic into your own module.
*  A module SHOULD adhere to our custom [[Naming Conventions]] for variables, methods, etc.
*  All code within a module SHOULD adhere to the formatting specified by the [PEAR Coding Standard](http://pear.php.net/manual/en/standards.php). To evaluate your own code, please use [Code Sniffer](http://pear.php.net/package/PHP_CodeSniffer/).

This is still under development here: [Module Building Guide Wiki](http://wiki.web2project.net/index.php?title=Category:Module_Building_Guide)

## Basic File Structure

Building a proper module in web2project requires a handful of key files in a particular structure. Each of which serve a specific purpose in the operation of the system. For a module called "Todos" - available from the web2project Modules - we would have the following file structure (filenames are case sensitive):





## Naming Conventions

Web2project works on the basis of "The easy way should also be the right way." A key reason that this works is because of our Naming Conventions. It allows quite a few things to "just work" without additional effort, configuration, or coding by anyone working on any module. As long as you stick to our conventions, your modules and customizations should need minimal updates between web2project releases.

There are three layers of the system that all interact together: the **database**, the module's **business logic**, and the **view/templating layer**. Since everything begins with the module, we'll begin there.

### Modules

*  Modules MUST have a unique name;
*  The module directory MUST be lower case alphanumeric with no special characters - ex: projects, links;
*  The module's files MUST be contained within its directory within the ''/modules/'' directory exclusively;
*  The module directory SHOULD be the plural form of the module name - ex: Project -> projects, Companies -> companies;
*  The module class file SHOULD be the plural form of the module name followed by '.class.php - ex: Project -> projects.class.php, Companies -> companies.class.php;
*  The module MAY have subclasses;
*  The module's subclass file MUST be the plural form of the subclass name followed by '.class.php' - ex: File Folder -> files/folders.class.php, Task Logs -> tasks/logs.class.php;
*  The module MUST have a file named setup.php with a setup class that extends w2p_Core_Setup;
*  The module MAY have a file named configure.php which allows for module-specific settings.

### Database Schema

*  The data table - different from linking or many:many tables - SHOULD be the plural form of the module name: ex: Project -> projects, Task -> tasks;
*  Fields of the data tables SHOULD be prefixed with the singular form of the module name - ex: project_id, project_name;
*  Foreign key relationships to other modules SHOULD be named modulename_othermodulename - ex: project_company links a Project to a specific Company, task_project links a Task to a specific Project;
*  Field names SHOULD be expressive towards what they are: ex: project_id is the primary key, project_name is the name of the project;
*  Date or datetime fields should be notes as such: ex: project_end_date vs task_end_datetime
*  Fields which are enumerated types SHOULD be stored as integers referring to specific System Lookup Values;
*  Fields which are enumerated types MUST have names which are easily converted to their System Lookup Values - ex: company_type -> CompanyType, project_status -> ProjectStatus, task_priority -> TaskPriority;
*  ''Linking tables or many:many relationships SHOULD {no conventions here, still a work in progress}.''

### Module Class(es)

*  The class name SHOULD be the singular form of the module name prefixed by the letter C - ex: Departments -> CDepartment, Contacts -> CContact;
*  A module MAY have subclasses;
*  Subclass(es) name MUST be the singular form of the module name prefixed by the letter C and then followed by an underscore (_) and singular form of the subclass - ex: File Folders -> CFile_Folder, Task Logs -> CTask_Log;
*  All classes and subclasses MUST respect core web2project permissions and ACLs;
*  The class's public properties MUST be named identically to its database table's columns - ex: CProject->project_id -> projects/project_id, CForum->forum_name -> forums/forum_name;
*  The class MAY have protected properties;
*  The class SHOULD NOT have any private properties;
*  The class's primary id property should end with '_id' - ex: CProject->project_id, CCompany->company_id;
*  The class's name property should end with '_name' - ex: CTask->task_name, CEvent->event_name;
*  The class's date or datetime properties SHOULD '_date' and '_datetime' respectively - ex: CEvent->event_start_date, CProject->project_end_date.

### View/Templating

*  The module MUST have a file named index.php which usually generates a list table of items;
*  The module SHOULD have a file named addedit.php which includes the HTML form to create or edit an item;
*  The module MAY have a file named view.php which displays all of the information related to an item;
*  The list table and view.php files SHOULD use the w2p_Output_HTMLHelper to format each data field properly.

### Exceptions

* The directories and main classes for the System Admin, SmartSearch, Project Designer, and History Modules are in folders and files with singular nouns instead of plural as you'd expect;
**   There's no specific plan of action to correct these oddities;
* The Department Module's database structure correctly names the table 'departments' but uses the column name prefix of 'dept' instead of the expected 'department'.